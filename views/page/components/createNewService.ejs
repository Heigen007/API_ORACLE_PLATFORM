Vue.component('create-new-service', {
    <%- include('./jsParts/componentData'); %>
    props: {
        services: Array
    },
    methods:{
        <%- include('./jsParts/paramsManipulations'); %>
        createService(){
            if(!this.checkData()) return
            var url = window.location.href
            fetch(url + "createService", {
                method: 'POST',
                body: JSON.stringify(this.info),
                headers:{
                    'Content-Type': 'application/json'
                }
            })
            .then((data) => {
                if(data.status == 200){
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Web service was created'
                    })
                    setTimeout(() => {
                       location.reload() 
                    }, 2000);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Some error occured'
                    })
                }
            })
        },
        checkData(){
            if (!(this.info.VERSION_NAME && this.info.ENDPOINT && this.info.HTTP_METHOD && this.info.SQL_CODE && this.checkParams(this.info.PARAMS)[0]
               && this.info.pool.CONNECT_STRING && this.info.pool.POOL_USER && this.info.pool.POOL_PASSWORD && this.info.pool.POOL_MIN
               && this.info.pool.POOL_MAX && this.info.pool.POOL_TIMEOUT && this.info.pool.POOL_PING_INTERVAL && this.info.pool.QUEUE_MAX
               && this.info.pool.QUEUE_TIMEOUT)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'All fields should be filled. Every "PATH" parameter should be required.'
                })
                return false
            }
            if(this.checkParams(this.info.PARAMS)[1] && this.info.HTTP_METHOD == "GET") {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Http method should be "POST" in case you have "BODY" parameter.'
                })
                return false
            }
            if(this.info.ENDPOINT[0] == "/") this.info.ENDPOINT = this.info.ENDPOINT.slice(1,this.info.ENDPOINT.length)
            if(this.info.ENDPOINT[this.info.ENDPOINT.length] == "/") this.info.ENDPOINT = this.info.ENDPOINT.slice(0,this.info.ENDPOINT.length - 1)
            var chEndp = this.checkEndpoint();
            if(!chEndp[0]){
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'One endpoint can not contain another. Endpoints: "'+ chEndp[1][0] + '" and "' + chEndp[1][0] + '"'
                })
                return false
            }
            if(this.info.ENDPOINT == "createService" || this.info.ENDPOINT == "createNewVersion" || this.info.ENDPOINT == "getServiceInfo" ||
               this.info.ENDPOINT == "updateVersion" || this.info.ENDPOINT == "getServices" || this.info.ENDPOINT == "updateHttpListener") {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Endpoint can not be "createService" or "createNewVersion" or "getServiceInfo" or "updateVersion" or "getServices" or "updateHttpListener"'
                })
                   return false
            }
            return true
        },
        checkParams(arr){
            var checkP = false
            var isPost = false
            arr.forEach(el => {
                if (!el.NAME || !el.TYPE || !el.LOCATION || (el.LOCATION == "Path" && !el.IS_REQUIRED) || (el.LOCATION == "Body" && !el.JSON_PATH)) checkP = true
                if(el.LOCATION == "Body") isPost = true
            })
            return [!checkP, isPost]
        },
        checkEndpoint(){
            var services = [];
            var bool = false;
            var boolArr = []
            this.services.forEach(el => {
                services.push(el.ENDPOINT + "/")
            })
            services = [...new Set(services)]
            services.push(this.info.ENDPOINT + "/")
            for (let i = 0; i < services.length; i++) {
                for (let o = 0; o < services.length; o++) {
                    if((services[i].includes(services[o]) || services[o].includes(services[i])) && o != i) {
                        bool = true;
                        boolArr[0] = services[i]
                        boolArr[1] = services[o]
                    }
                }
            }
            return [!bool, boolArr]
        }
    },
    template: 
    `
    <div class="mdiv">
        <div class="inputDiv">
            <div class="label">Version name: </div>
            <input class="input" type="text" v-model="info.VERSION_NAME">
        </div>
        <div class="inputDiv">
            <div class="label">Description: </div>
            <textarea v-model="info.DESCRIPTION"></textarea>
        </div>
        <div class="inputDiv">
            <div class="label">Endpoint: </div>
            <input class="input" type="text" v-model="info.ENDPOINT">
        </div>
        <div class="inputDiv">
            <div class="label">Http method: </div>
            <select v-model="info.HTTP_METHOD">
                <option disabled>Choose the method</option>
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
        </div>
        <div class="inputDiv">
            <div class="label">Is Enabled: </div>
            <input class="input" type="checkbox" v-model="info.IS_ENABLED">
        </div>
        <h2>Pool parameters:</h2>
        <%- include('./htmlParts/poolParams'); %>
        <h2 class="mt-2">Parameters:</h2>
        <%- include('./htmlParts/params'); %>
        <h2>SQL query:</h2>
        <%- include('./htmlParts/sqlCode'); %>
        <h2>Final JSON format:</h2>
        <div style="font-size: 0.8em">Find more information on docs page</div>
        <%- include('./htmlParts/jsonCode'); %>
        <div class="but create mt" @click='createService'>Create</div>
    </div>
    `
})