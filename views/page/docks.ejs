<div class="docs" v-if="chosenMainPage == 'docs'">
    <h1>Docs</h1>
    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    SETTINGS
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>Settings.</strong> This part helps you to decide, what action you want to do.<br>
                    You can: create new service, create new version or update the version of the service, that already exists.<br>
                    To create new version or update the version of the service, that already exists you need to choose the version from the table by clicking on it.<br>
                    Then you should write down 3 parameters:<br>
                    <strong>Version name</strong>(version from 10th of August) - the name of the version(you can see it in the second column of the table).<br>
                    <strong>Description</strong>(some Text) - discription of the version(optional).<br>
                    <strong>Endpoint</strong>(someEndpoint/someApi/andSoOn) - you <strong>should not</strong> put <code>'/'</code> at the beginning of the Endpoint. <strong style="color: red">NOTICE!</strong> One endpoint can not contain another. For example "xxx/xxx" and "xxx/xxx/x" are illegal.<br>
                    <strong>Is enabled</strong>(true/false) - you can define the status of the service. If false, service does not work.
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    POOL parameters
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>POOL parameters.</strong> There are 9 pool parameters you can define. Here is the short description, all the information you can find in official documentation(<a target="__blank" href="https://oracle.github.io/node-oracledb/doc/api.html#createpoolpoolattrs">DOCUMENTATION</a>)<br>
                    <strong>1. user</strong> - Database username(SOME_USER_NAME)<br>
                    <strong>2. password</strong> - Database password(SOME_password)<br>
                    <strong>3. connectString</strong> - Database connection string - you can find it in TNSNAMES for example((DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 11.1.1.111)(PORT = 1111)))(CONNECT_DATA =(SERVICE_NAME = SOMEDATA))))<br>
                    <strong>4. poolMin</strong> - The number of connections established to the database when a pool is created.<br>
                    <strong>5. poolMax</strong> - The maximum number of connections to which a connection pool can grow.<br>
                    <strong>6. poolTimeout</strong> - The number of seconds after which idle connections (unused in the pool) may be terminated. So, if there is no current connections, the number of connections will be equal to poolMin property.<br>
                    <strong>7. poolPingInterval</strong> - This property is not important, it is used to validate the connection in the pool.<br>
                    <strong>8. queueMax</strong> - The maximum number of pending connections that can be queued. If queue reaches queueMax number, any future requests will immediately return an error and will not be queued. You can set it to <strong>-1</strong> to make the queue not limited.<br>
                    <strong>9. queueTimeout</strong> - The number of milliseconds after which connection requests waiting in the connection request queue are terminated. If queueTimeout is set to 0, then queued connection requests are never terminated.<br>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Parameters
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>Parameters. </strong> You can add as many parameters as you want. Each parameter has 4 settings.<br>
                    <strong>Name</strong> - the name of the parameter that will be used in http request. Notice, that "name" and "Name" are different parameters because of the letter case.<br>
                    <strong>Type</strong> -  <strong>Integer</strong>(12), <strong>Number</strong>(12.5), <strong>String</strong>("someString")<br>
                    <strong>Location</strong><br>
                    <div style="margin-left: 10px">
                        <strong>Path</strong>(http://someHost:8080/endpoint1/<strong>12</strong>) - it must be required<br>
                        <strong>URL</strong>(http://someHost:8080/endpoint1<strong>?name=someString</strong>)<br>
                        <strong>Header</strong> - you can add some header parameters if you want.<br>
                        <strong>Is required</strong> - you can define the requiredness of the parameter.
                    </div>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFour">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="true" aria-controls="collapseFour">
                    SQL query
                </button>
            </h2>
            <div id="collapseFour" class="accordion-collapse collapse" aria-labelledby="headingFour" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>SQL query.</strong> Here you should write your sql code. You should use parameters you want to put into your sql code in like this: <code>${name}</code>.<br>
                    <strong style="color: red">NOTICE!</strong> If your parameter is optional(not required) you should use such structure:<br>
                    <code>
                        {{sqlExStartCode}}<br>
                        <div style="white-space: pre;">    ,${name} AS name</div>
                        {{sqlExEndCode}}
                    </code><br>
                    Tou must follow this structure of tags if you have optional parameter.<br>
                    <strong>FULL CODE EXAMPLE</strong><br>
                    <code>
                        <div v-for="(el,i) in sqlFullCode" :key="i" style="white-space: pre;">{{el}}<br></div>
                    </code>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFive">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="true" aria-controls="collapseFive">
                    Final JSON format
                </button>
            </h2>
            <div id="collapseFive" class="accordion-collapse collapse" aria-labelledby="headingFive" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>Final JSON format(optional).</strong> This is the last part of your service code. In the example code you will see some code, but all you nee to know is that the result. that Database returns you can find in <code>result</code><br>
                    And to send some response back on http request you should use <code>res.status(httpCode).send(somethingHere)</code><br>
                    Database returns object, where all object properties has UPCASE. So you need to write down some manipulations and create your own structure.<br>
                    <strong>EXAMPLE</strong><br>
                    <code>
                        <div v-for="(el,i) in jsFullCode" :key="i" style="white-space: pre;">{{el}}<br></div>
                    </code>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingSix">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSix" aria-expanded="true" aria-controls="collapseSix">
                    Updating your service by HTTP request
                </button>
            </h2>
            <div id="collapseSix" class="accordion-collapse collapse" aria-labelledby="headingSix" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    When you updated or created new version of the service, or created a new service, you can activate the latest versions by two ways:<br>
                    <strong>1)</strong> - you can restart the server - that will activate the newest versions of all services(if they are enabled('Is Enabled' property))<br>
                    <strong>2)</strong> - you can use http method, where you shoul just put the parameter of version of the service. All versions in all services are unique, so there are no problems with this.<br>
                    Example<br>
                    <code>http://localhost:8080/makeHttpListeners?methodId=27</code><br>
                    'methodId' property you can find in all services table in third column.<br>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingSeven">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSeven" aria-expanded="true" aria-controls="collapseSeven">
                    Http Codes
                </button>
            </h2>
            <div id="collapseSeven" class="accordion-collapse collapse" aria-labelledby="headingSeven" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    There are also some http codes, that are sent by the platform in different cases.<br>
                    <strong>200</strong> - everything is OK<br>
                    <strong>400</strong> - parameters are incorrect. It can appear if the name of the parameter is incorrect(password instead of Password) and also if it is required, but not sent in http request.<br>
                    <strong>404</strong> - endpoint is not found. It could happen, if endpoint is not working or it is in the process of creating.<br>
                    <strong>500</strong> - some server error occured. If there is error with compiling SQL code you will find string "'sql query is incorrect' + error message" in response.
                </div>
            </div>
        </div>
    </div>
</div>